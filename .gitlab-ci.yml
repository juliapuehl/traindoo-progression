# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

image: node:16.14.2

#CI_MERGE_REQUEST_TARGET_BRANCH_NAME
#CI_COMMIT_BRANCH

#workflow:
# rules:
#  -

# optimize by creating custom docker with firebase-tools integrated: https://about.gitlab.com/blog/2020/03/16/gitlab-ci-cd-with-firebase/
before_script:
  - npm i -g firebase-tools
  - node -v
  - npm -v

stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

development-build-job: # This job runs in the build stage, which runs first.
  stage: build
  variables:
    ENV: 'development'
    INTERCOM_ENV: 'qkfsakn2'
    # Submodule behaviour needs to be set here (and not using "git submoduole update --init" in "before_script"
    # section of this file) to avoid the following problem: https://gitlab.com/gitlab-org/gitlab-runner/-/issues/28783
    # Apart from the failed authentication described in the link above, another sympton is the
    # "Skipping Git submodules setup" line in the pipeline console output as discussed (along with the fix)
    # in this Stackoverflow thread:
    # https://stackoverflow.com/questions/68052124/stopping-gitlab-from-skipping-git-submodules-during-ci-job
    # Additional reference:
    # https://docs.gitlab.com/ee/ci/runners/configure_runners.html#git-submodule-strategy
    GIT_SUBMODULE_STRATEGY: 'recursive'
  script:
    - echo "Building Traindoo Deploy Package"
    - export REACT_APP_ENV=$ENV
    - export REACT_APP_INTERCOM_ENV=$INTERCOM_ENV
    - node -v
    - npm -v
    - npm install
    - npm run format
    - npm run lint
    - npm run check-format
    - CI=false npm run build
    - echo "Build successful"
  artifacts:
    expire_in: 1 hour
    paths:
      - build
      - node_modules/
      - .firebaserc
      - firebase.json
  only:
    - development

staging-build-job: # This job runs in the build stage, which runs first.
  stage: build
  variables:
    ENV: 'staging'
    INTERCOM_ENV: 'jurxct14'
    GIT_SUBMODULE_STRATEGY: 'recursive'
  script:
    - echo "Building Traindoo Deploy Package"
    - export REACT_APP_ENV=$ENV
    - export REACT_APP_INTERCOM_ENV=$INTERCOM_ENV
    - node -v
    - npm -v
    - npm install
    - npm run format
    - npm run lint
    - npm run check-format
    - CI=false npm run build
    - echo "Build successful"
  artifacts:
    expire_in: 1 hour
    paths:
      - build
      - node_modules/
      - .firebaserc
      - firebase.json
  only:
    - stage-beta

production-build-job: # This job runs in the build stage, which runs first.
  stage: build
  variables:
    ENV: 'production'
    INTERCOM_ENV: 'jurxct14'
    GIT_SUBMODULE_STRATEGY: 'recursive'
  script:
    - echo "Building Traindoo Deploy Package"
    - export REACT_APP_ENV=$ENV
    - export REACT_APP_INTERCOM_ENV=$INTERCOM_ENV
    - node -v
    - npm -v
    - npm install
    - npm run format
    - npm run lint
    - npm run check-format
    #TODO: Remove CI=false -> treats warnings as errors
    - CI=false npm run release
    - echo "Build successful"
  artifacts:
    expire_in: 1 hour
    paths:
      - build
      - node_modules/
      - .firebaserc
      - firebase.json
  only:
    - production

#unit-test-job:   # This job runs in the test stage.
#  stage: test    # It only starts when the job in the build stage completes successfully.
#  script:
#    - echo "Running unit tests... This will take about 10 seconds."
#    - CI=true npm test
#    - echo "Code coverage is 100% (this is fake)"

#lint-test-job:   # This job also runs in the test stage.
#  stage: test    # It can run at the same time as unit-test-job (in parallel).
#  script:
#    - echo "Linting code... This will take about 10 seconds."
#    - sleep 10
#    - echo "No lint issues found."

development-deploy-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploying Application for Development"
    - firebase deploy -P development --only hosting:traindoo-io-dev --token $FIREBASE_TOKEN_2
    - echo "Application successfully deployed."
  only:
    - development

staging-deploy-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploying Application for Staging"
    - firebase deploy -P staging --only hosting:traindoo-dev --token $FIREBASE_TOKEN_2
    - echo "Application successfully deployed."
  only:
    - stage-beta

production-deploy-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploying Application for Production"
    - firebase deploy -P production --only hosting:traindoo-io --token $FIREBASE_TOKEN_2
    - echo "Application successfully deployed."
  only:
    - production
